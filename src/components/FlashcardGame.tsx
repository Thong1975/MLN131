/**
 * Flashcard Game Component - Th·∫ª ghi nh·ªõ ki·∫øn th·ª©c v·ªÅ Gia ƒë√¨nh
 */

import { useState } from 'react';
import { motion } from 'framer-motion';
import { ChevronLeft, ChevronRight, RotateCcw, Shuffle } from 'lucide-react';

interface Flashcard {
  id: number;
  front: string;
  back: string;
  category: string;
}

const flashcards: Flashcard[] = [
  {
    id: 1,
    front: 'Gia ƒë√¨nh l√† g√¨?',
    back: 'T·ªï ch·ª©c x√£ h·ªôi c∆° b·∫£n nh·∫•t, ƒë∆∞·ª£c h√¨nh th√†nh tr√™n c∆° s·ªü quan h·ªá h√¥n nh√¢n, huy·∫øt th·ªëng ho·∫∑c nu√¥i d∆∞·ª°ng.',
    category: 'Kh√°i ni·ªám'
  },
  {
    id: 2,
    front: '5 ch·ª©c nƒÉng c∆° b·∫£n c·ªßa gia ƒë√¨nh',
    back: '1. Sinh ƒë·∫ª\n2. Kinh t·∫ø\n3. Gi√°o d·ª•c\n4. ChƒÉm s√≥c\n5. VƒÉn h√≥a - tinh th·∫ßn',
    category: 'Ch·ª©c nƒÉng'
  },
  {
    id: 3,
    front: 'Gia ƒë√¨nh h·∫°t nh√¢n',
    back: 'M√¥ h√¨nh gia ƒë√¨nh g·ªìm b·ªë, m·∫π v√† con c√°i (3-4 ng∆∞·ªùi). Chi·∫øm 52% h·ªô gia ƒë√¨nh Vi·ªát Nam, ph·ªï bi·∫øn nh·∫•t hi·ªán nay.',
    category: 'M√¥ h√¨nh'
  },
  {
    id: 4,
    front: 'Gia ƒë√¨nh m·ªü r·ªông',
    back: 'Gia ƒë√¨nh ƒëa th·∫ø h·ªá g·ªìm √¥ng b√†, b·ªë m·∫π, con ch√°u (7+ ng∆∞·ªùi). Chi·∫øm 20%, c√≤n ph·ªï bi·∫øn ·ªü n√¥ng th√¥n.',
    category: 'M√¥ h√¨nh'
  },
  {
    id: 5,
    front: 'Gi√° tr·ªã truy·ªÅn th·ªëng c·ªßa gia ƒë√¨nh VN',
    back: 'Hi·∫øu th·∫£o, T∆∞∆°ng th√¢n t∆∞∆°ng √°i, ∆†n nghƒ©a, Nh√¢n nghƒ©a - g√¨n gi·ªØ v√† ph√°t huy trong th·ªùi k·ª≥ m·ªõi.',
    category: 'Gi√° tr·ªã'
  },
  {
    id: 6,
    front: 'Gi√° tr·ªã m·ªõi, ti·∫øn b·ªô',
    back: 'B√¨nh ƒë·∫≥ng gi·ªõi, D√¢n ch·ªß gia ƒë√¨nh, VƒÉn minh ti·∫øn b·ªô, Tr√°ch nhi·ªám x√£ h·ªôi - k·∫øt h·ª£p v·ªõi truy·ªÅn th·ªëng.',
    category: 'Gi√° tr·ªã'
  },
  {
    id: 7,
    front: 'Nguy√™n t·∫Øc x√¢y d·ª±ng gia ƒë√¨nh',
    back: 'H√¥n nh√¢n t·ª± nguy·ªán, B√¨nh ƒë·∫≥ng v·ª£ ch·ªìng, M·ªôt v·ª£ m·ªôt ch·ªìng, T√¥n tr·ªçng y√™u th∆∞∆°ng, Tr√°ch nhi·ªám nu√¥i con.',
    category: 'Nguy√™n t·∫Øc'
  },
  {
    id: 8,
    front: 'Th√°ch th·ª©c ch√≠nh hi·ªán nay',
    back: '√Åp l·ª±c kinh t·∫ø, Bi·∫øn ƒë·ªïi c∆° c·∫•u, B·∫•t b√¨nh ƒë·∫≥ng gi·ªõi, Di c∆∞ lao ƒë·ªông, VƒÉn h√≥a ngo·∫°i lai, Gi√† h√≥a d√¢n s·ªë.',
    category: 'Th√°ch th·ª©c'
  },
  {
    id: 9,
    front: 'Lu·∫≠t H√¥n nh√¢n v√† Gia ƒë√¨nh 2014',
    back: 'N√¢ng cao vai tr√≤ b·∫£o v·ªá quy·ªÅn l·ª£i tr·∫ª em, ph√≤ng ch·ªëng b·∫°o l·ª±c gia ƒë√¨nh, quy ƒë·ªãnh r√µ quy·ªÅn v√† nghƒ©a v·ª•.',
    category: 'Ph√°p lu·∫≠t'
  },
  {
    id: 10,
    front: 'Xu h∆∞·ªõng bi·∫øn ƒë·ªïi gia ƒë√¨nh',
    back: 'Quy m√¥ gi·∫£m (5.1‚Üí3.6 ng∆∞·ªùi), H·∫°t nh√¢n h√≥a tƒÉng, ƒêa th·∫ø h·ªá gi·∫£m, ƒê∆°n th√¢n tƒÉng, D√¢n ch·ªß h∆°n.',
    category: 'Xu h∆∞·ªõng'
  }
];

export default function FlashcardGame() {
  const [currentCard, setCurrentCard] = useState(0);
  const [isFlipped, setIsFlipped] = useState(false);
  const [cards, setCards] = useState(flashcards);

  const handleFlip = () => {
    setIsFlipped(!isFlipped);
  };

  const handleNext = () => {
    if (currentCard < cards.length - 1) {
      setCurrentCard(currentCard + 1);
      setIsFlipped(false);
    }
  };

  const handlePrev = () => {
    if (currentCard > 0) {
      setCurrentCard(currentCard - 1);
      setIsFlipped(false);
    }
  };

  const handleReset = () => {
    setCurrentCard(0);
    setIsFlipped(false);
  };

  const handleShuffle = () => {
    const shuffled = [...cards].sort(() => Math.random() - 0.5);
    setCards(shuffled);
    setCurrentCard(0);
    setIsFlipped(false);
  };

  const card = cards[currentCard];
  const progress = ((currentCard + 1) / cards.length) * 100;

  return (
    <div className="max-w-3xl mx-auto">
      {/* Progress */}
      <div className="mb-6">
        <div className="flex justify-between text-sm text-gray-600 mb-2">
          <span>Th·∫ª {currentCard + 1}/{cards.length}</span>
          <span className="px-3 py-1 bg-primary-100 text-primary-800 rounded-full text-xs font-semibold">
            {card.category}
          </span>
        </div>
        <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.3 }}
            className="h-full bg-gradient-to-r from-primary-600 to-accent-500"
          />
        </div>
      </div>

      {/* Flashcard */}
      <div className="perspective-1000 mb-6">
        <motion.div
          className="relative h-80 cursor-pointer"
          onClick={handleFlip}
          whileHover={{ scale: 1.02 }}
          whileTap={{ scale: 0.98 }}
        >
          <motion.div
            className="absolute inset-0"
            initial={false}
            animate={{ rotateY: isFlipped ? 180 : 0 }}
            transition={{ duration: 0.6, type: 'spring' }}
            style={{ transformStyle: 'preserve-3d' }}
          >
            {/* Front */}
            <div
              className="absolute inset-0 backface-hidden bg-gradient-to-br from-primary-600 to-primary-800 rounded-2xl shadow-2xl p-8 flex items-center justify-center"
              style={{ backfaceVisibility: 'hidden' }}
            >
              <div className="text-center">
                <p className="text-3xl font-bold text-white mb-4">
                  {card.front}
                </p>
                <p className="text-primary-200 text-sm">
                  Nh·∫•n ƒë·ªÉ xem c√¢u tr·∫£ l·ªùi
                </p>
              </div>
            </div>

            {/* Back */}
            <div
              className="absolute inset-0 backface-hidden bg-gradient-to-br from-accent-400 to-accent-600 rounded-2xl shadow-2xl p-8 flex items-center justify-center"
              style={{ backfaceVisibility: 'hidden', transform: 'rotateY(180deg)' }}
            >
              <div className="text-center">
                <p className="text-xl text-white whitespace-pre-line leading-relaxed">
                  {card.back}
                </p>
                <p className="text-accent-100 text-sm mt-4">
                  Nh·∫•n ƒë·ªÉ l·∫≠t ng∆∞·ª£c l·∫°i
                </p>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>

      {/* Controls */}
      <div className="flex items-center justify-between gap-4">
        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={handlePrev}
          disabled={currentCard === 0}
          className={`p-3 rounded-full shadow-lg transition-all ${
            currentCard === 0
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-white text-primary-700 hover:bg-primary-50'
          }`}
        >
          <ChevronLeft size={24} />
        </motion.button>

        <div className="flex gap-3">
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleShuffle}
            className="px-6 py-3 bg-white text-primary-700 rounded-full shadow-lg hover:shadow-xl transition-all inline-flex items-center space-x-2"
          >
            <Shuffle size={18} />
            <span className="font-semibold">X√°o tr·ªôn</span>
          </motion.button>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleReset}
            className="px-6 py-3 bg-white text-primary-700 rounded-full shadow-lg hover:shadow-xl transition-all inline-flex items-center space-x-2"
          >
            <RotateCcw size={18} />
            <span className="font-semibold">B·∫Øt ƒë·∫ßu l·∫°i</span>
          </motion.button>
        </div>

        <motion.button
          whileHover={{ scale: 1.1 }}
          whileTap={{ scale: 0.9 }}
          onClick={handleNext}
          disabled={currentCard === cards.length - 1}
          className={`p-3 rounded-full shadow-lg transition-all ${
            currentCard === cards.length - 1
              ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
              : 'bg-white text-primary-700 hover:bg-primary-50'
          }`}
        >
          <ChevronRight size={24} />
        </motion.button>
      </div>

      {/* Tips */}
      <div className="mt-8 p-4 bg-blue-50 border-l-4 border-blue-500 rounded-r-lg">
        <p className="text-sm text-blue-900">
          <strong>üí° M·∫πo:</strong> S·ª≠ d·ª•ng th·∫ª ghi nh·ªõ ƒë·ªÉ √¥n t·∫≠p ki·∫øn th·ª©c m·ªôt c√°ch hi·ªáu qu·∫£. 
          H√£y c·ªë g·∫Øng nh·ªõ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi l·∫≠t th·∫ª!
        </p>
      </div>
    </div>
  );
}
