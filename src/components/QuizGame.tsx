/**
 * Quiz Game Component - Tr√≤ ch∆°i ki·ªÉm tra ki·∫øn th·ª©c v·ªÅ Gia ƒë√¨nh trong CNXH
 */

import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle, XCircle, Trophy, RotateCcw, ArrowRight } from 'lucide-react';

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation: string;
}

const quizQuestions: Question[] = [
  {
    id: 1,
    question: 'Gia ƒë√¨nh l√† g√¨ theo quan ƒëi·ªÉm x√£ h·ªôi h·ªçc?',
    options: [
      'Nh√≥m ng∆∞·ªùi s·ªëng chung trong m·ªôt nh√†',
      'T·ªï ch·ª©c x√£ h·ªôi c∆° b·∫£n ƒë∆∞·ª£c h√¨nh th√†nh tr√™n c∆° s·ªü h√¥n nh√¢n, huy·∫øt th·ªëng ho·∫∑c nu√¥i d∆∞·ª°ng',
      'Nh·ªØng ng∆∞·ªùi c√≥ quan h·ªá h·ªç h√†ng',
      'ƒê∆°n v·ªã kinh t·∫ø s·∫£n xu·∫•t'
    ],
    correctAnswer: 1,
    explanation: 'Gia ƒë√¨nh l√† t·ªï ch·ª©c x√£ h·ªôi c∆° b·∫£n nh·∫•t, ƒë∆∞·ª£c h√¨nh th√†nh tr√™n c∆° s·ªü quan h·ªá h√¥n nh√¢n, huy·∫øt th·ªëng ho·∫∑c nu√¥i d∆∞·ª°ng.'
  },
  {
    id: 2,
    question: 'Theo Ch·ªß t·ªãch H·ªì Ch√≠ Minh, ƒëi·ªÅu ki·ªán ƒë·ªÉ x√¢y d·ª±ng CNXH l√† g√¨?',
    options: [
      'Ph√°t tri·ªÉn kinh t·∫ø',
      'Gi·∫£i ph√≥ng ph·ª• n·ªØ',
      'X√≥a b·ªè giai c·∫•p',
      'C√¥ng nghi·ªáp h√≥a'
    ],
    correctAnswer: 1,
    explanation: '"N·∫øu kh√¥ng gi·∫£i ph√≥ng ph·ª• n·ªØ th√¨ kh√¥ng x√¢y d·ª±ng ƒë∆∞·ª£c ch·ªß nghƒ©a x√£ h·ªôi" - Ch·ªß t·ªãch H·ªì Ch√≠ Minh'
  },
  {
    id: 3,
    question: 'M√¥ h√¨nh gia ƒë√¨nh n√†o chi·∫øm t·ª∑ l·ªá cao nh·∫•t ·ªü Vi·ªát Nam hi·ªán nay?',
    options: [
      'Gia ƒë√¨nh m·ªü r·ªông (ƒëa th·∫ø h·ªá)',
      'Gia ƒë√¨nh h·∫°t nh√¢n (3-4 ng∆∞·ªùi)',
      'Gia ƒë√¨nh ƒë∆°n th√¢n',
      'Gia ƒë√¨nh kh√¥ng c√≥ con'
    ],
    correctAnswer: 1,
    explanation: 'Gia ƒë√¨nh h·∫°t nh√¢n chi·∫øm kho·∫£ng 52% t·ªïng s·ªë h·ªô gia ƒë√¨nh Vi·ªát Nam, l√† m√¥ h√¨nh ph·ªï bi·∫øn nh·∫•t hi·ªán nay.'
  },
  {
    id: 4,
    question: 'Quy m√¥ trung b√¨nh h·ªô gia ƒë√¨nh Vi·ªát Nam nƒÉm 2019 l√† bao nhi√™u?',
    options: [
      '5.1 ng∆∞·ªùi',
      '4.2 ng∆∞·ªùi',
      '3.6 ng∆∞·ªùi',
      '2.8 ng∆∞·ªùi'
    ],
    correctAnswer: 2,
    explanation: 'Quy m√¥ h·ªô gia ƒë√¨nh ƒë√£ gi·∫£m t·ª´ 5.1 ng∆∞·ªùi (1999) xu·ªëng 3.6 ng∆∞·ªùi (2019), ph·∫£n √°nh xu h∆∞·ªõng gia ƒë√¨nh h·∫°t nh√¢n h√≥a.'
  },
  {
    id: 5,
    question: 'Ch·ª©c nƒÉng n√†o KH√îNG ph·∫£i l√† ch·ª©c nƒÉng c∆° b·∫£n c·ªßa gia ƒë√¨nh?',
    options: [
      'Ch·ª©c nƒÉng sinh ƒë·∫ª',
      'Ch·ª©c nƒÉng gi√°o d·ª•c',
      'Ch·ª©c nƒÉng s·∫£n xu·∫•t c√¥ng nghi·ªáp',
      'Ch·ª©c nƒÉng kinh t·∫ø'
    ],
    correctAnswer: 2,
    explanation: 'Gia ƒë√¨nh c√≥ 5 ch·ª©c nƒÉng c∆° b·∫£n: sinh ƒë·∫ª, kinh t·∫ø, gi√°o d·ª•c, chƒÉm s√≥c v√† vƒÉn h√≥a-tinh th·∫ßn. S·∫£n xu·∫•t c√¥ng nghi·ªáp kh√¥ng ph·∫£i ch·ª©c nƒÉng c∆° b·∫£n c·ªßa gia ƒë√¨nh.'
  },
  {
    id: 6,
    question: 'Lu·∫≠t H√¥n nh√¢n v√† Gia ƒë√¨nh hi·ªán h√†nh c·ªßa Vi·ªát Nam ƒë∆∞·ª£c ban h√†nh nƒÉm n√†o?',
    options: [
      '2000',
      '2010',
      '2014',
      '2020'
    ],
    correctAnswer: 2,
    explanation: 'Lu·∫≠t H√¥n nh√¢n v√† Gia ƒë√¨nh 2014 l√† lu·∫≠t hi·ªán h√†nh, n√¢ng cao vai tr√≤ b·∫£o v·ªá quy·ªÅn l·ª£i tr·∫ª em v√† ph√≤ng ch·ªëng b·∫°o l·ª±c gia ƒë√¨nh.'
  },
  {
    id: 7,
    question: 'Gi√° tr·ªã n√†o l√† gi√° tr·ªã truy·ªÅn th·ªëng c·ªßa gia ƒë√¨nh Vi·ªát Nam?',
    options: [
      'B√¨nh ƒë·∫≥ng gi·ªõi',
      'Hi·∫øu th·∫£o',
      'D√¢n ch·ªß gia ƒë√¨nh',
      'T∆∞ duy hi·ªán ƒë·∫°i'
    ],
    correctAnswer: 1,
    explanation: 'Hi·∫øu th·∫£o l√† gi√° tr·ªã truy·ªÅn th·ªëng c·ªët l√µi c·ªßa gia ƒë√¨nh Vi·ªát Nam, th·ªÉ hi·ªán s·ª± t√¥n k√≠nh √¥ng b√†, cha m·∫π v√† th·ªù c√∫ng t·ªï ti√™n.'
  },
  {
    id: 8,
    question: 'Xu h∆∞·ªõng ly h√¥n ·ªü Vi·ªát Nam trong 20 nƒÉm qua (2000-2020) nh∆∞ th·∫ø n√†o?',
    options: [
      'Gi·∫£m m·∫°nh',
      'Kh√¥ng ƒë·ªïi',
      'TƒÉng d·∫ßn',
      'Dao ƒë·ªông kh√¥ng ·ªïn ƒë·ªãnh'
    ],
    correctAnswer: 2,
    explanation: 'S·ªë v·ª• ly h√¥n tƒÉng t·ª´ kho·∫£ng 120 ngh√¨n v·ª• (2000) l√™n 260 ngh√¨n v·ª• (2020), ph·∫£n √°nh thay ƒë·ªïi trong quan ni·ªám h√¥n nh√¢n.'
  }
];

export default function QuizGame() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showResult, setShowResult] = useState(false);
  const [score, setScore] = useState(0);
  const [gameFinished, setGameFinished] = useState(false);

  const handleAnswerClick = (answerIndex: number) => {
    if (selectedAnswer !== null) return; // ƒê√£ ch·ªçn r·ªìi

    setSelectedAnswer(answerIndex);
    setShowResult(true);

    if (answerIndex === quizQuestions[currentQuestion].correctAnswer) {
      setScore(score + 1);
    }
  };

  const handleNext = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowResult(false);
    } else {
      setGameFinished(true);
    }
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowResult(false);
    setScore(0);
    setGameFinished(false);
  };

  const getScoreMessage = () => {
    const percentage = (score / quizQuestions.length) * 100;
    if (percentage === 100) return { title: 'Xu·∫•t s·∫Øc! üèÜ', message: 'B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c v·ªÅ gia ƒë√¨nh trong th·ªùi k·ª≥ qu√° ƒë·ªô l√™n CNXH!' };
    if (percentage >= 75) return { title: 'R·∫•t t·ªët! üåü', message: 'B·∫°n c√≥ hi·ªÉu bi·∫øt t·ªët v·ªÅ ch·ªß ƒë·ªÅ n√†y. Ti·∫øp t·ª•c ph√°t huy!' };
    if (percentage >= 50) return { title: 'Kh√°! üëç', message: 'B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c m·ªôt s·ªë ki·∫øn th·ª©c c∆° b·∫£n. H√£y h·ªçc th√™m nh√©!' };
    return { title: 'C·∫ßn c·ªë g·∫Øng h∆°n! üìö', message: 'H√£y ƒë·ªçc l·∫°i t√†i li·ªáu ƒë·ªÉ hi·ªÉu r√µ h∆°n v·ªÅ ch·ªß ƒë·ªÅ n√†y.' };
  };

  if (gameFinished) {
    const scoreMsg = getScoreMessage();
    return (
      <motion.div
        initial={{ opacity: 0, scale: 0.9 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white rounded-2xl shadow-2xl p-8 max-w-2xl mx-auto"
      >
        <div className="text-center">
          <motion.div
            initial={{ scale: 0 }}
            animate={{ scale: 1 }}
            transition={{ type: 'spring', delay: 0.2 }}
          >
            <Trophy className="w-24 h-24 mx-auto text-yellow-500 mb-4" />
          </motion.div>
          
          <h2 className="text-3xl font-bold text-primary-900 mb-2">{scoreMsg.title}</h2>
          <p className="text-xl text-gray-700 mb-6">{scoreMsg.message}</p>
          
          <div className="bg-gradient-to-r from-primary-100 to-accent-100 rounded-xl p-6 mb-6">
            <p className="text-lg text-gray-700 mb-2">ƒêi·ªÉm s·ªë c·ªßa b·∫°n:</p>
            <p className="text-5xl font-bold text-primary-900">
              {score}/{quizQuestions.length}
            </p>
            <p className="text-lg text-gray-600 mt-2">
              ({((score / quizQuestions.length) * 100).toFixed(0)}%)
            </p>
          </div>

          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleRestart}
            className="bg-gradient-to-r from-primary-700 to-primary-900 text-white px-8 py-4 rounded-full font-semibold shadow-lg hover:shadow-xl transition-shadow inline-flex items-center space-x-2"
          >
            <RotateCcw size={20} />
            <span>Ch∆°i l·∫°i</span>
          </motion.button>
        </div>
      </motion.div>
    );
  }

  const question = quizQuestions[currentQuestion];
  const progress = ((currentQuestion + 1) / quizQuestions.length) * 100;

  return (
    <div className="max-w-3xl mx-auto">
      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between text-sm text-gray-600 mb-2">
          <span>C√¢u h·ªèi {currentQuestion + 1}/{quizQuestions.length}</span>
          <span>{progress.toFixed(0)}%</span>
        </div>
        <div className="w-full h-3 bg-gray-200 rounded-full overflow-hidden">
          <motion.div
            initial={{ width: 0 }}
            animate={{ width: `${progress}%` }}
            transition={{ duration: 0.5 }}
            className="h-full bg-gradient-to-r from-primary-600 to-accent-500"
          />
        </div>
      </div>

      {/* Question Card */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentQuestion}
          initial={{ opacity: 0, x: 50 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -50 }}
          transition={{ duration: 0.3 }}
          className="bg-white rounded-2xl shadow-2xl p-8 mb-6"
        >
          <h3 className="text-2xl font-bold text-primary-900 mb-6">
            {question.question}
          </h3>

          <div className="space-y-4">
            {question.options.map((option, index) => {
              const isSelected = selectedAnswer === index;
              const isCorrect = index === question.correctAnswer;
              const showCorrect = showResult && isCorrect;
              const showWrong = showResult && isSelected && !isCorrect;

              return (
                <motion.button
                  key={index}
                  whileHover={{ scale: selectedAnswer === null ? 1.02 : 1 }}
                  whileTap={{ scale: selectedAnswer === null ? 0.98 : 1 }}
                  onClick={() => handleAnswerClick(index)}
                  disabled={selectedAnswer !== null}
                  className={`w-full p-4 rounded-xl text-left font-medium transition-all ${
                    showCorrect
                      ? 'bg-green-100 border-2 border-green-500 text-green-900'
                      : showWrong
                      ? 'bg-red-100 border-2 border-red-500 text-red-900'
                      : isSelected
                      ? 'bg-primary-100 border-2 border-primary-500'
                      : 'bg-gray-50 border-2 border-gray-200 hover:border-primary-300 hover:bg-primary-50'
                  } ${selectedAnswer !== null ? 'cursor-not-allowed' : 'cursor-pointer'}`}
                >
                  <div className="flex items-center justify-between">
                    <span>{option}</span>
                    {showCorrect && <CheckCircle className="text-green-600" size={24} />}
                    {showWrong && <XCircle className="text-red-600" size={24} />}
                  </div>
                </motion.button>
              );
            })}
          </div>

          {/* Explanation */}
          <AnimatePresence>
            {showResult && (
              <motion.div
                initial={{ opacity: 0, height: 0 }}
                animate={{ opacity: 1, height: 'auto' }}
                exit={{ opacity: 0, height: 0 }}
                className="mt-6 p-4 bg-blue-50 border-l-4 border-blue-500 rounded-r-lg"
              >
                <p className="text-sm font-semibold text-blue-900 mb-1">Gi·∫£i th√≠ch:</p>
                <p className="text-sm text-blue-800">{question.explanation}</p>
              </motion.div>
            )}
          </AnimatePresence>
        </motion.div>
      </AnimatePresence>

      {/* Next Button */}
      {showResult && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center"
        >
          <motion.button
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            onClick={handleNext}
            className="bg-gradient-to-r from-primary-700 to-primary-900 text-white px-8 py-4 rounded-full font-semibold shadow-lg hover:shadow-xl transition-shadow inline-flex items-center space-x-2"
          >
            <span>{currentQuestion < quizQuestions.length - 1 ? 'C√¢u ti·∫øp theo' : 'Xem k·∫øt qu·∫£'}</span>
            <ArrowRight size={20} />
          </motion.button>
        </motion.div>
      )}
    </div>
  );
}


